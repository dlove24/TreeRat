/**
*** Provides defines for platform, compiler and header options from CMake.
***
*** Copyright (c) 2012 David Love <david@homeunix.org.uk>
***
*** Permission to use, copy, modify, and/or distribute this software for any
*** purpose with or without fee is hereby granted, provided that the above
*** copyright notice and this permission notice appear in all copies.
***
*** THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
*** WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
*** MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
*** ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
*** WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
*** ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
*** OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
***
*** \file config.h
***
*** \author David Love
*** \date November 2012
**/

#ifndef CONFIG_H
#define CONFIG_H 1

/**
*** Platform Checks
**/

/* Look for the machine type on Apple platforms at compile (not configure). Apple platforms
** allow multiple architectures to exit simultaneously, so we can't check at configure
**
** See: http://www.cmake.org/pipermail/cmake/2009-June/030126.html
**/

#if defined(__APPLE__)
#  if defined(__i386__)
#    undef HAVE_64_BIT
#    undef HAVE_BIG_ENDIAN
#  elif defined(__ppc__)
#    undef HAVE_64_BIT
#    define HAVE_BIG_ENDIAN
#  elif defined(__x86_64__)
#    define HAVE_64_BIT
#    undef HAVE_BIG_ENDIAN
#  elif defined(__ppc64__)
#    define HAVE_64_BIT
#    define HAVE_BIG_ENDIAN
#  else
      // oops
#    error "Unknown architecture!"
#  endif
#else
#cmakedefine HAVE_64_BIT
#cmakedefine HAVE_BIG_ENDIAN
#endif

#ifdef HAVE_BIG_ENDIAN
#  define BYTE_ORDER BIG_ENDIAN
#else
#  define BYTE_ORDER LITTLE_ENDIAN
#endif

/***
**** Function Declarations
****
**/

/* The location of popen varies a bit. These variables set both the
 * existance of popen, and its location
 */
#cmakedefine HAVE_POPEN 1
#cmakedefine POPEN_PROTO_STDLIB 1
#cmakedefine POPEN_PROTO_STDIO 1

/* OpenSSL library defines.
 */
#cmakedefine HAVE_SSL 1

/* Host to network conversion routines */
#cmakedefine HAVE_B32_NTOP 1
#cmakedefine HAVE_B32_PTON 1
#cmakedefine HAVE_B64_NTOP 1
#cmakedefine HAVE_B64_PTON 1

/* BSD C Library functions
 */
#cmakedefine HAVE_STRLCPY 1

/***
**** Header Declarations
****
**/

/* Look for the getopt library. If this is not available, routines
 * should use the provided implementation of the ArgTable library.
 * Even better, just use the ArgTable library...
 */
#cmakedefine HAVE_GETOPT_H 1

/* "Standard" headers files. Some or all of these should exist on
 * a reasonably sane platform
 */

#cmakedefine HAVE_INTTYPES_H 1
#cmakedefine HAVE_NETDB_H 1
#cmakedefine HAVE_RESOLV_H 1
#cmakedefine HAVE_SOCKLEN_T 1
#cmakedefine HAVE_STDDEF_H 1
#cmakedefine HAVE_STDINT_H 1
#cmakedefine HAVE_STDLIB_H 1
#cmakedefine HAVE_UNISTD_H 1
#cmakedefine HAVE_WINSOCK2_H 1

#cmakedefine HAVE_ARPA_INET_H 1
#cmakedefine HAVE_NETINET_IN_H 1
#cmakedefine HAVE_SYS_SELECT_H 1
#cmakedefine HAVE_SYS_TYPES_H 1

/***
 *** Type Defines
 ***
 **/

#cmakedefine TYPEDEF___U_CHAR  1
#cmakedefine TYPEDEF___U_INT   1
#cmakedefine TYPEDEF___U_LONG  1
#cmakedefine TYPEDEF___U_SHORT 1

/***
**** Compatability defines. These may also need addtional functions
**** in the 'compat' library to be linked in if used.
****
**/

#include <config/compat.h>

#endif /* config.h */
