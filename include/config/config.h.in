/**
*** Copyright (c) 2012 David Love <david@homeunix.org.uk>
***
*** Permission to use, copy, modify, and/or distribute this software for any
*** purpose with or without fee is hereby granted, provided that the above
*** copyright notice and this permission notice appear in all copies.
***
*** THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
*** WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
*** MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
*** ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
*** WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
*** ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
*** OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
***
*** \file config.h
*** \brief Provides defines for platform, compiler and header options from CMake
***
*** \author David Love
*** \date November 2012
**/

/**
*** Platform Checks
**/

/* Look for the machine type on Apple platforms at compile (not configure). Apple platforms
** allow multiple architectures to exit simultaneously, so we can't check at configure
**
** See: http://www.cmake.org/pipermail/cmake/2009-June/030126.html
**/

#if defined(__APPLE__)
#  if defined(__i386__)
#    undef HAVE_64_BIT
#    undef HAVE_BIG_ENDIAN
#  elif defined(__ppc__)
#    undef HAVE_64_BIT
#    define HAVE_BIG_ENDIAN
#  elif defined(__x86_64__)
#    define HAVE_64_BIT
#    undef HAVE_BIG_ENDIAN
#  elif defined(__ppc64__)
#    define HAVE_64_BIT
#    define HAVE_BIG_ENDIAN
#  else
      // oops
#    error "Unknown architecture!"
#  endif
#else
#cmakedefine HAVE_64_BIT
#cmakedefine HAVE_BIG_ENDIAN
#endif

/**
*** Function Declarations
**/

/* The location of popen varies a bit. These variables set both the
 * existance of popen, and its location
 */
#cmakedefine HAVE_POPEN 1
#cmakedefine POPEN_PROTO_STDLIB 1
#cmakedefine POPEN_PROTO_STDIO 1

/* OpenSSL library defines.
 */
#cmakedefine HAVE_SSL 1

/**
*** Header Declarations
**/

/* Look for the getopt library. If this is not available, routines
 * should use the provided implementation of the ArgTable library.
 * Even better, just use the ArgTable library...
 */
#cmakedefine HAVE_GETOPT_H 1

/* "Standard" headers files. Some or all of these should exist on
 * a reasonably sane platform
 */

#cmakedefine HAVE_INTTYPES_H 1
#cmakedefine HAVE_NETDB_H 1
#cmakedefine HAVE_RESOLV_H 1
#cmakedefine HAVE_SOCKLEN_T 1
#cmakedefine HAVE_STDINT_H 1
#cmakedefine HAVE_UNISTD_H 1
#cmakedefine HAVE_WINSOCK2_H 1

#cmakedefine HAVE_ARPA_INET_H 1
#cmakedefine HAVE_NETINET_IN_H 1
#cmakedefine HAVE_SYS_SELECT_H 1
#cmakedefine HAVE_SYS_TYPES_H 1

/**
*** Network to Host Conversion Functions. Principally used by the ldns library.
**/

#cmakedefine HAVE_B32_NTOP 1
#cmakedefine HAVE_B32_PTON 1
#cmakedefine HAVE_B64_NTOP 1
#cmakedefine HAVE_B64_PTON 1

#ifdef HAVE_B64_PTON
#  define B64_PTON
#  include <resolv.h>
   int ldns_b64_ntop (uint8_t const* src, size_t srclength,
                      char* target, size_t targsize);

   /**
    * calculates the size needed to store the result of b64_ntop
    */
   static inline size_t ldns_b64_ntop_calculate_size (size_t srcsize) {
     return ( ( ( (srcsize + 2) / 3) * 4) + 1);
     }
#endif /* B64_PTON */

#ifdef HAVE_B64_NTOP
#  define B64_NTOP
#  include <resolv.h>

   int ldns_b64_pton (char const* src, uint8_t* target, size_t targsize);

   /**
    * calculates the size needed to store the result of ldns_b64_pton
    */
   static inline size_t ldns_b64_pton_calculate_size (size_t srcsize) {
     return ( ( ( ( (srcsize + 3) / 4) * 3)) + 1);
     }
#endif /* B64_NTOP */

/* detect if we need to cast to unsigned int for FD_SET to avoid warnings */
#ifdef HAVE_WINSOCK2_H
#  define FD_SET_T (u_int)
#else
#  define FD_SET_T
#endif
